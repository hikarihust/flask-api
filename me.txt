                                REST API

The code in this section includes a simple Flask app and a HTML and JavaScript file which calls the Flask app endpoints.
Installing Flask
    pip install flask
First Flask application
    python app.py 
    Open http://127.0.0.1:5000/ to check 
Creating our application endpoints
Returning a list of stores
    python app.py 
    Go to browser http://127.0.0.1:5000/store to test
Implementing other endpoints
Calling the API from JavaScript
    Open http://127.0.0.1:5000/
Using Postman for API testing
    Header:
        Content-Type: application/json
    Body(raw)

    ==========================================================================================================

                                Flask-RESTful for more efficient development
            
Virtualenvs and setting up Flask-RESTful
    pip3 freeze
        check list libraries installed 
    pip3 install virtualenv 
        Use to install virtual environment 
    virtualenv is a tool to create virtual environment
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 freeze
    deactivate to leave virtual environment
First Flask-RESTful app
    .\venv\Scripts\activate
    py app.py
    http://127.0.0.1:5000/student/Rolf
Test-first API design—what is that?
    GET: http://127.0.0.1:5000/items
        /items
        Description: This should return a list of items, each in JSON format
    GET: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Description: This will return one specific item, uniquely identified by its name.
            No two items may have same name
    POST: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Header: 
            Content-Type: application/json
        Body(raw):
            {
                "price": 15.99
            }
        Description: This will create a new item. If the item already exists, it will fail
    DELETE: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Description: This will delete an item, uniquely identified by name
    PUT: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Header: 
            Content-Type: application/json
        Body(raw):
            {
                "price": 15.99
            }
        Description: This will create a new item or update an existting item.
Creating our Item Resource
    POST: http://127.0.0.1:5000/item/chair 
        {
            "price": 15.99
        }
    GET: http://127.0.0.1:5000/item/chair
The ItemList and creating Items
    POST: http://127.0.0.1:5000/item/chair 
        {
            "price": 15.99
        }
    GET: http://127.0.0.1:5000/items
Improving code and error control
Authentication and logging - 1
    pip3 install Flask-JWT
        install Flask-JWT in virtual environment
Authentication and logging - 2
    POST: http://127.0.0.1:5000/auth 
    Header: 
        Content-Type: application/json
    Body(raw):
        {
            "username": "bob",
            "password": "asdf"
        }
    Response:
        {
            "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTMwNDA2MzQsImlhdCI6MTYxMzA0MDMzNCwibmJmIjoxNjEzMDQwMzM0LCJpZGVudGl0eSI6MX0.JFalBF1cO5dlPwQAN8dP887CawnD1NUQonXADlBujRU"
        }
    http://127.0.0.1:5000/item/piano
        Khi chưa gửi token
            {
                "description": "Request does not contain an access token",
                "error": "Authorization Required",
                "status_code": 401
            }
    Header:
        Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTMwNDA2MzQsImlhdCI6MTYxMzA0MDMzNCwibmJmIjoxNjEzMDQwMzM0LCJpZGVudGl0eSI6MX0.JFalBF1cO5dlPwQAN8dP887CawnD1NUQonXADlBujRU
    http://127.0.0.1:5000/item/piano
        Response
        {
            "item": {
                "name": "piano",
                "price": 15.99
            }
        }
DELETE to delete Items
PUT to create or update Items
    http://127.0.0.1:5000/item/piano
    Content-Type: application/json
    Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTMwNDMyMzAsImlhdCI6MTYxMzA0MjkzMCwibmJmIjoxNjEzMDQyOTMwLCJpZGVudGl0eSI6MX0.zg49A3eqt4N4O2alBE2g4s74E10bZxqw32u_6SNPCdU
Advanced request parsing with Flask-RESTful
Optimising our final code and request parsing

    ==========================================================================================================

                                Storing resources in a SQL database

Setting up our project
    virtualenv venv --python=python3
    .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 install Flask-JWT
    py app.py to check it runs
Running a SQLite database and interacting with it from Python
    py test.py
Logging in and retrieving Users from a database
    py test.py
    py app.py
    POST: http://127.0.0.1:5000/auth
    POST: http://127.0.0.1:5000/item/chair
    GET: http://127.0.0.1:5000/item/chair
Signing up and writing Users to a database
    py .\create_table.py
    py app.py
    POST: http://127.0.0.1:5000/register
    POST: http://127.0.0.1:5000/item/table
    GET: http://127.0.0.1:5000/item/table
Preventing duplicate usernames when signing users up
Retrieving our Item resources from a database
    cursor.execute("INSERT INTO items VALUES ('test', 10.99)")
    .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 install Flask-JWT
    py .\create_table.py
    py .\app.py 
    POST: http://127.0.0.1:5000/register
    POST: http://127.0.0.1:5000/auth
    GET: http://127.0.0.1:5000/item/test
    GET: http://127.0.0.1:5000/item/test2
Writing our Item resources to a database
    rm .\data.db
    py .\create_table.py
    py .\app.py
    POST: http://127.0.0.1:5000/register
    POST: http://127.0.0.1:5000/auth
    POST: http://127.0.0.1:5000/item/test
    GET: http://127.0.0.1:5000/item/test
    POST: http://127.0.0.1:5000/item/test again to test error
Deleting our Item resources from the database
    DELETE: http://127.0.0.1:5000/item/test
    GET: http://127.0.0.1:5000/item/test
Refactoring insertion of items
The PUT method with database interaction
Retrieving many items from the database
    Không save thì không cần commit mà chỉ cần close database
    PUT http://127.0.0.1:5000/item/piano
    GET: http://127.0.0.1:5000/items
    GET: http://127.0.0.1:5000/item/piano
    POST: http://127.0.0.1:5000/item/desk
    GET: http://127.0.0.1:5000/items again to check get both items(piano and desk)
    DELETE: http://127.0.0.1:5000/item/piano
    GET: http://127.0.0.1:5000/items to check item deleted
    ==========================================================================================================

                                Simplifying storage with Flask-SQLAlchemy

Setting up project
    Create section6 folder
    virtualenv venv --python=python3
    .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 install Flask-JWT
    pip3 install Flask-SQLAlchemy
Improving the project structure and maintainability
Creating User and Item models
Verifying the app works after our changes
    py .\create_table.py
    py .\app.py
    POST: http://127.0.0.1:5000/register
    POST: http://127.0.0.1:5000/auth
    GET: http://127.0.0.1:5000/items
    POST: http://127.0.0.1:5000/item/phone
    GET: http://127.0.0.1:5000/items again to check item created 
    GET: http://127.0.0.1:5000/item/phone
    DELETE: http://127.0.0.1:5000/item/phone
    PUT: http://127.0.0.1:5000/item/phone
    GET: http://127.0.0.1:5000/items again to check edited 
Advanced Postman: environments and tests
    Environment Variable
        url: http://127.0.0.1:5000
        token: 
    GET: {{url}}/items
    GET: {{url}}/item/phone
    POST: {{url}}/item/phone
    PUT: {{url}}/item/phone
    DELETE: {{url}}/item/phone
    POST: {{url}}/auth
    POST: {{url}}/register
    Tests tab: 
    POST: {{url}}/auth to check 
        Tests tab:
            var jsonData = pm.response.json();
            tests["Access token was not empty"] = jsonData.access_token !== undefined;
            pm.environment.set("token", jsonData.access_token);
        Test Results tab: 
            Pass: Access token was not empty
    GET: {{url}}/item/phone normal get result 
    GET: {{url}}/items
        Tests tab:
            pm.test("Response time is less than 200ms", function () {
                pm.expect(pm.response.responseTime).to.be.below(200);
            });
            pm.test("Status code is 200", function () {
                pm.response.to.have.status(200);
            });
        Test Results tab: 
            PASS: Response time is less than 200ms
            PASS: Status code is 200
    GET: {{url}}/item/test
        Tests tab:
            pm.test("Response time is less than 200ms", function () {
                pm.expect(pm.response.responseTime).to.be.below(200);
            });
            pm.test("Status code is 200", function () {
                pm.response.to.have.status(200);
            });
        Test Results tab: 
            PASS: Response time is less than 200ms
            FAIL: Status code is 200 | AssertionError: expected response to have status code 200 but got 401
Telling SQLAlchemy about our tables and columns
Implementing the ItemModel using SQLAlchemy
    virtualenv venv --python=python3
    .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 install Flask-JWT
    pip3 install Flask-SQLAlchemy
    py .\create_table.py
    py .\app.py
    POST: {{url}}/register
    POST: {{url}}/auth
    POST: {{url}}/item/test
    GET: {{url}}/items
    PUT: {{url}}/item/test to check edited
    DELETE: {{url}}/item/test
    GET: {{url}}/items to check deleted
Implementing the UserModel using SQLAlchemy
Easily displaying the ItemList resource with SQLAlchemy
No more creating tables manually—telling SQLAlchemy to creat
Creating a new model: StoreModel
Creating the Store Resource
Final testing of this section's API
    rm .\data.db
    py .\app.py
    POST: {{url}}/register
    POST: {{url}}/auth
    GET: {{url}}/items
    POST: {{url}}/item/test
        "price": 15.99 only
        -> Every item needs a store_id.
    POST: {{url}}/item/test
        "price": 15.99,
        "store_id": 1
    GET: {{url}}/item/test
    DELETE: {{url}}/item/test
    PUT: {{url}}/item/test
        "price": 27.99 only
        -> Every item needs a store_id
    PUT: {{url}}/item/test
        "price": 27.99,
        "store_id": 2
    GET: {{url}}/store/table
    POST: {{url}}/store/test
    POST: {{url}}/store/test2
    GET: {{url}}/store/test
    GET: {{url}}/store/test2
    DELETE: {{url}}/store/test
    GET: {{url}}/stores
    
    ==========================================================================================================

                                Deploying Flask apps to Heroku

Setting up Heroku for Flask
    Create New App
    App name: flask-py-api 
    git init
    heroku git:remote -a flask-py-api
    git add .
    git commit -am "first deploy"
    git push heroku master
    -> No default language could be detected for this app
Adding the required files to the project
    runtime.txt
        It is going to tell Heroku what kind of language and what version we are using
    requirements.txt
        Tell Heroku that libraries are in use and that should install
    uwsgi.ini
        Some configuration param for the UWSGI process 
    Procfile
        It will tell Heroku how to run our app
    git commit -m 'Adding the required files to the project'
    git push heroku master
Logs in Heroku and troubleshooting errors
    https://flask-py-api.herokuapp.com/
        -> https://flask-py-api.herokuapp.com/
    heroku logs --app=flask-py-api
    uwsgi.ini
        module = run:app
    git commit -am "Fixed not importing db when running the app"
    git push heroku master
Testing the deployed API with Postman
    url: https://flask-py-api.herokuapp.com
    POST: {{url}}/register
    POST: {{url}}/auth
    GET: {{url}}/items
    POST: {{url}}/item/test
    GET: {{url}}/item/test
    DELETE: {{url}}/item/test
Adding PostgreSQL to our Heroku app
    https://dashboard.heroku.com/apps -> flask-py-api 
    -> resources(tab) -> Find more add-ons
        Search Elements: postgres
            -> Heroku Postgres
            -> Install Heroku Postgres
    -> Settings(tab) -> Reveal Config Vars
        We have DATABASE_URL value 
        app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///data.db')
        sqlite:///data.db dùng khi lập trình trên local
        DATABASE_URL là giá trị khi deploy lên heroku
    psycopg2: is a very popular Python library used to interact with Postgres
    git commit -am "Added PostgresSQL environment variable and psycopg2"
    git push heroku master
    POST: {{url}}/register
    POST: {{url}}/auth
    GET: {{url}}/items
    https://dashboard.heroku.com/apps -> flask-py-api -> Heroku Postgres -> Overview(tab)
        check: 1 connection(from app), 1 row(user registered), 3 table(user, item, store)
    https://dashboard.heroku.com/apps -> flask-py-api -> Heroku Postgres -> Settings -> View Credentials
        to check Host, Database, User, Port, password, URI
    
    ==========================================================================================================

                                Deploying Flask apps to our own server

Installing PostgreSQL in Ubuntu
    sudo apt-get update 
    sudo apt-get install postgresql postgresql-contrib
    sudo -i -u postgres
    psql 
    \conninfo:
        connect to database postgres
    \q: to exit the psql process, it leaves the database and goes back to the Unix terminal 
    exit: log out off the postgres user(Logging by sudo -i -u postgres)
Creating a UNIX user in Ubuntu
    sudo su -
    adduser jose
        To create a new user
    Add the new user to sudo users
        Running the visudo command will open a file (normally located at /etc/sudoers).
        visudo
    Under "User privilege specification", add the following line below root line
        jose ALL=(ALL:ALL) ALL
    su - jose 
        Swith to jose user
Setting up our new user with PostgreSQL permissions
    su - jose 
    sudo su
    sudo -i -u postgres
    To create a postgres user, run the following command. Note, the user must have the same name as the 
        unix user logged into the server ("jose" in our case).
        P is allow us to set a password for this user
        createuser jose -P
    To create a database, run
        createdb jose
    exit to exit from postgres user -> root
    exit to exit from root user -> jose 
    The user by default connect to the same database as the user's name
    psql
    \conninfo
    To enforce password login to PostgreSQL with user jose, run the following commands. Note 12 is the PostgreSQL version 
        installed in your server. Later this version may change so make sure to change your accordingly.
        vi /etc/postgresql/12/main/pg_hba.conf
    Scroll down to the bottom and change "peer" to "md5" in the following line under '# "local" is for unix domain socket 
        connections only comment'. This is how the line should look after changing.
        local all all md5
Setting up nginx and our REST API
    Update server by running
        sudo apt-get update
    To install Nginx, run
        sudo apt-get install nginx
    Allow Nginx access through firewall (otherwise incoming requests will be blocked by the firewall)
        sudo ufw enable
        sudo ufw allow 'Nginx HTTP'
    Also since we have enabled firewall, remember to allow ssh through the firewall, else you will get locked out of the server.
        sudo ufw allow ssh
    You can check firewall status by using
        sudo ufw status
    To check Nginx status, use
        systemctl status nginx
    The following commands stop, start and restart Nginx respectively.
        systemctl stop nginx
        systemctl start nginx
        systemctl restart nginx
    Configuring Nginx
    Create a new file for the items REST API configuration.
        sudo vi /etc/nginx/sites-available/items-rest.conf
            server {
                listen 80;
                real_ip_header X-Forwarded-For;
                set_real_ip_from 127.0.0.1;
                server_name localhost;

                location / {
                    include uwsgi_params;
                    uwsgi_pass unix:/var/www/html/items-rest/socket.sock;
                    uwsgi_modifier1 30;
                }

                error_page 404 /404.html;
                location = 404.html {
                    root /usr/share/nginx/html;
                }

                error_page 500 502  503 504 50x.html;
                location = /50x.html {
                    root /usr/share/nginx/html;
                }
            }
    Enable the configuration by running
        sudo ln -s /etc/nginx/sites-available/items-rest.conf /etc/nginx/sites-enabled/
    Create the socket.sock file and clone the items rest app
    Create a directory/folder for the app
        sudo mkdir /var/www/html/items-rest
        sudo chown jose:jose /var/www/html/items-rest
    Got to the directory, clone the app and install dependencies. Run the following commands one by one in that order.
        cd /var/www/html/items-rest
        git clone https://github.com/vudinhquang/flask-api.git 
            Procfile
            app.py
            db.py
            models
            requirements.txt
            resources
            run.py
            runtime.txt
            security.py
            uwsgi.ini
            in deploy-to-server copy to current folder
        mkdir log
        sudo apt-get install python3-pip python3-dev libpq-dev
        pip3 install virtualenv
        python3 -m virtualenv venv
        source venv/bin/activate
        pip3 install -r requirements.txt 
Setting up uWSGI to run our REST API
    Go to the items-rest directory we created
        cd /var/www/html/items-rest
    sudo vi /etc/systemd/system/uwsgi_items_rest.service
        [Unit]
        Description=uWSGI items rest

        [Service]
        Environment=DATABASE_URL=postgres://jose:jose@localhost:5432/jose
        ExecStart=/var/www/html/items-rest/venv/bin/uwsgi --master --emperor /var/www/html/items-rest/uwsgi.ini --die-on-term --uid jose --gid jose --logto /var/www/html/items-rest/log/emperor.log
        Restart=always
        KillSignal=SIGQUIT
        Type=notify
        NotifyAccess=all

        [Install]
        WantedBy=multi-user.target
    Replace the uwsgi.ini file contents with the following
        [uwsgi]
        base = /var/www/html/items-rest
        app = run
        module = %(app)

        home = %(base)/venv
        pythonpath = %(base)

        socket = %(base)/socket.sock

        chmod-socket = 777

        processes = 8

        threads = 8

        harakiri = 15

        callable = app

        logto = /var/www/html/items-rest/log/%n.log
    Start the app by running
        sudo systemctl start uwsgi_items_rest
Testing our API to make sure
    Because the default configuration property for nginx will be the first one that gets loaded
        sudo rm /etc/nginx/sites-enabled/default
    sudo systemctl reload nginx
    sudo systemctl restart nginx
    sudo systemctl start uwsgi_items_rest
    Ec2 open port 80
    url: http://3.22.249.40
    POST: {{url}}/register
    POST: {{url}}/auth
    GET: {{url}}/items
    POST: {{url}}/store/test
    POST: {{url}}/item/test
        it sends store_id param so {{url}}/store/test have to request to created store
    GET: {{url}}/stores
    
    ==========================================================================================================

                                Security in REST APIs

https://books.tecladocode.com/rest-apis-with-flask-and-python/domains-and-https/what-is-a-domain
Getting our domain name
    https://ap.www.namecheap.com/
Setting up Cloudflare
    https://www.cloudflare.com/
    Add sites: vudinhquang-dev.com 
        That domain is register while Getting our domain name
    Log in to your Namecheap Account, change DNS server
        Cloudflare's nameservers:
            michael.ns.cloudflare.com
            tiffany.ns.cloudflare.com
Setting our DNS records
    https://dash.cloudflare.com/ go to vudinhquang-dev.com 
    DNS(tab)
    Add records:
        Type: A, Name: vudinhquang-dev.com, Content: 3.22.249.40 
        Type: CNAME, Name: www.vudinhquang-dev.com, Content: vudinhquang-dev.com
    Check mail: To complete your sign up, please verify your email
        click link
Verifying everything works
    url: http://vudinhquang-dev.com
    POST: {{url}}/auth
    POST: {{url}}/store/test_store
    GET: {{url}}/stores
Creating our SSL certificate in Cloudflare
    https://chemicloud.com/blog/enable-and-setup-cloudflare/
    https://dash.cloudflare.com/ go to vudinhquang-dev.com 
    SSL/TLS(tab)
        Full (strict)
    Overview(tab)
        Automatic HTTPS Rewrites -> On -> Save
        Always use HTTPS -> On -> Save
        Auto Minify -> JavaScript, html, css -> Save
        Brotli -> On -> Save
    Click the Origin Server tab.
    Create Certificate to open the Origin Certificate Installation window.
        Key format: PEM 

    ==========================================================================================================

                                Token refreshing and Flask-JWT-Extended

Prepare for this section
    Copy code from section6
A recap of the code + a few changes
Creating a User Resource for testing
Testing our new Resource with Postman
    virtualenv venv --python=python3
    .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 install Flask-JWT
    pip3 install Flask-SQLAlchemy
    py .\app.py
    url: http://127.0.0.1:5000
    POST: {{url}}/register
    POST: {{url}}/auth
    GET: {{url}}/user/1
    DELETE: {{url}}/user/1
Logging in with Flask-JWT-Extended
    pip3 install flask-jwt-extended
    py .\app.py
Testing the login with Postman
    py .\app.py
    url: http://127.0.0.1:5000
    POST: {{url}}/register
    POST: {{url}}/login
    GET: {{url}}/items
Adding JWT Claims
    Claims in flask-jwt-extended are just pieces of data we can choose to attach to the jwt payload
    @jwt.additional_claims_loader
    from flask_jwt_extended import get_jwt
    @jwt_required()
    pip3 install flask-jwt-extended
    py .\app.py
    POST: {{url}}/register register jose user
    POST: {{url}}/register register jose1 user
    POST: {{url}}/login login jose user 
    POST: {{url}}/item/test
    DELETE: {{url}}/item/test delete ok
    POST: {{url}}/item/test
    POST: {{url}}/login login jose1 user
    DELETE: {{url}}/item/test -> Admin privilege required
Getting the JWT identity in and endpoint and @jwt_optional
    @jwt_required(optional=True)
    get_jwt_identity() to get identity(uder id)
    GET: {{url}}/items 
        if have not send Headers
        Authorization: Bearer {{token}}
         -> items name
            More data available if you log in
    GET: GET: {{url}}/items 
        Authorization: Bearer {{token}}
        -> get full item infomation 
What is a fresh token
    A token you have recently received after entering your username and password
    The site can be confident it is you, and not someone else
Performing token refresh in our REST API
    POST: {{url}}/login
        return access_token and refresh_token value
        var jsonData = pm.response.json();
        tests["Access token was not empty"] = jsonData.access_token !== undefined;
        pm.environment.set("token", jsonData.access_token);
        tests["Fresh token was not empty"] = jsonData.refresh_token !== undefined;
        pm.environment.set("refresh_token", jsonData.refresh_token);
    POST: {{url}}/refresh using refresh_token value
        Authorization  Bearer {{refresh_token}}
Requiring a fresh token in an endpoint
    POST: {{url}}/login
    POST: {{url}}/refresh
    POST: {{url}}/item/test
        Have to send(Headers)
        Authorization: Bearer {{token}}
        -> Fresh token required
    POST: {{url}}/login have to login before post {{url}}/item/test 
    POST: {{url}}/item/test
    