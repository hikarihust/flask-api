                                REST API

The code in this section includes a simple Flask app and a HTML and JavaScript file which calls the Flask app endpoints.
Installing Flask
    pip install flask
First Flask application
    python app.py 
    Open http://127.0.0.1:5000/ to check 
Creating our application endpoints
Returning a list of stores
    python app.py 
    Go to browser http://127.0.0.1:5000/store to test
Implementing other endpoints
Calling the API from JavaScript
    Open http://127.0.0.1:5000/
Using Postman for API testing
    Header:
        Content-Type: application/json
    Body(raw)

    ==========================================================================================================

                                Flask-RESTful for more efficient development
            
Virtualenvs and setting up Flask-RESTful
    pip3 freeze
        check list libraries installed 
    pip3 install virtualenv 
        Use to install virtual environment 
    virtualenv is a tool to create virtual environment
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 freeze
    deactivate to leave virtual environment
First Flask-RESTful app
    .\venv\Scripts\activate
    py app.py
    http://127.0.0.1:5000/student/Rolf
Test-first API designâ€”what is that?
    GET: http://127.0.0.1:5000/items
        /items
        Description: This should return a list of items, each in JSON format
    GET: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Description: This will return one specific item, uniquely identified by its name.
            No two items may have same name
    POST: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Header: 
            Content-Type: application/json
        Body(raw):
            {
                "price": 15.99
            }
        Description: This will create a new item. If the item already exists, it will fail
    DELETE: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Description: This will delete an item, uniquely identified by name
    PUT: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Header: 
            Content-Type: application/json
        Body(raw):
            {
                "price": 15.99
            }
        Description: This will create a new item or update an existting item.
Creating our Item Resource
    POST: http://127.0.0.1:5000/item/chair 
        {
            "price": 15.99
        }
    GET: http://127.0.0.1:5000/item/chair
The ItemList and creating Items
    POST: http://127.0.0.1:5000/item/chair 
        {
            "price": 15.99
        }
    GET: http://127.0.0.1:5000/items
Improving code and error control
Authentication and logging - 1
    pip3 install Flask-JWT
        install Flask-JWT in virtual environment
    