                                REST API

The code in this section includes a simple Flask app and a HTML and JavaScript file which calls the Flask app endpoints.
Installing Flask
    pip install flask
First Flask application
    python app.py 
    Open http://127.0.0.1:5000/ to check 
Creating our application endpoints
Returning a list of stores
    python app.py 
    Go to browser http://127.0.0.1:5000/store to test
Implementing other endpoints
Calling the API from JavaScript
    Open http://127.0.0.1:5000/
Using Postman for API testing
    Header:
        Content-Type: application/json
    Body(raw)

    ==========================================================================================================

                                Flask-RESTful for more efficient development
            
Virtualenvs and setting up Flask-RESTful
    pip3 freeze
        check list libraries installed 
    pip3 install virtualenv 
        Use to install virtual environment 
    virtualenv is a tool to create virtual environment
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 freeze
    deactivate to leave virtual environment
First Flask-RESTful app
    .\venv\Scripts\activate
    py app.py
    http://127.0.0.1:5000/student/Rolf
Test-first API design—what is that?
    GET: http://127.0.0.1:5000/items
        /items
        Description: This should return a list of items, each in JSON format
    GET: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Description: This will return one specific item, uniquely identified by its name.
            No two items may have same name
    POST: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Header: 
            Content-Type: application/json
        Body(raw):
            {
                "price": 15.99
            }
        Description: This will create a new item. If the item already exists, it will fail
    DELETE: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Description: This will delete an item, uniquely identified by name
    PUT: http://127.0.0.1:5000/item/<name>
        /item/<name>
        Header: 
            Content-Type: application/json
        Body(raw):
            {
                "price": 15.99
            }
        Description: This will create a new item or update an existting item.
Creating our Item Resource
    POST: http://127.0.0.1:5000/item/chair 
        {
            "price": 15.99
        }
    GET: http://127.0.0.1:5000/item/chair
The ItemList and creating Items
    POST: http://127.0.0.1:5000/item/chair 
        {
            "price": 15.99
        }
    GET: http://127.0.0.1:5000/items
Improving code and error control
Authentication and logging - 1
    pip3 install Flask-JWT
        install Flask-JWT in virtual environment
Authentication and logging - 2
    POST: http://127.0.0.1:5000/auth 
    Header: 
        Content-Type: application/json
    Body(raw):
        {
            "username": "bob",
            "password": "asdf"
        }
    Response:
        {
            "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTMwNDA2MzQsImlhdCI6MTYxMzA0MDMzNCwibmJmIjoxNjEzMDQwMzM0LCJpZGVudGl0eSI6MX0.JFalBF1cO5dlPwQAN8dP887CawnD1NUQonXADlBujRU"
        }
    http://127.0.0.1:5000/item/piano
        Khi chưa gửi token
            {
                "description": "Request does not contain an access token",
                "error": "Authorization Required",
                "status_code": 401
            }
    Header:
        Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTMwNDA2MzQsImlhdCI6MTYxMzA0MDMzNCwibmJmIjoxNjEzMDQwMzM0LCJpZGVudGl0eSI6MX0.JFalBF1cO5dlPwQAN8dP887CawnD1NUQonXADlBujRU
    http://127.0.0.1:5000/item/piano
        Response
        {
            "item": {
                "name": "piano",
                "price": 15.99
            }
        }
DELETE to delete Items
PUT to create or update Items
    http://127.0.0.1:5000/item/piano
    Content-Type: application/json
    Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTMwNDMyMzAsImlhdCI6MTYxMzA0MjkzMCwibmJmIjoxNjEzMDQyOTMwLCJpZGVudGl0eSI6MX0.zg49A3eqt4N4O2alBE2g4s74E10bZxqw32u_6SNPCdU
Advanced request parsing with Flask-RESTful
Optimising our final code and request parsing

    ==========================================================================================================

                                Storing resources in a SQL database

Setting up our project
    virtualenv venv --python=python3
    .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 install Flask-JWT
    py app.py to check it runs
Running a SQLite database and interacting with it from Python
    py test.py
Logging in and retrieving Users from a database
    py test.py
    py app.py
    POST: http://127.0.0.1:5000/auth
    POST: http://127.0.0.1:5000/item/chair
    GET: http://127.0.0.1:5000/item/chair
Signing up and writing Users to a database
    py .\create_table.py
    py app.py
    POST: http://127.0.0.1:5000/register
    POST: http://127.0.0.1:5000/item/table
    GET: http://127.0.0.1:5000/item/table
Preventing duplicate usernames when signing users up
Retrieving our Item resources from a database
    cursor.execute("INSERT INTO items VALUES ('test', 10.99)")
    .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 install Flask-JWT
    py .\create_table.py
    py .\app.py 
    POST: http://127.0.0.1:5000/register
    POST: http://127.0.0.1:5000/auth
    GET: http://127.0.0.1:5000/item/test
    GET: http://127.0.0.1:5000/item/test2
Writing our Item resources to a database
    rm .\data.db
    py .\create_table.py
    py .\app.py
    POST: http://127.0.0.1:5000/register
    POST: http://127.0.0.1:5000/auth
    POST: http://127.0.0.1:5000/item/test
    GET: http://127.0.0.1:5000/item/test
    POST: http://127.0.0.1:5000/item/test again to test error
Deleting our Item resources from the database
    DELETE: http://127.0.0.1:5000/item/test
    GET: http://127.0.0.1:5000/item/test
Refactoring insertion of items
The PUT method with database interaction
Retrieving many items from the database
    Không save thì không cần commit mà chỉ cần close database
    PUT http://127.0.0.1:5000/item/piano
    GET: http://127.0.0.1:5000/items
    GET: http://127.0.0.1:5000/item/piano
    POST: http://127.0.0.1:5000/item/desk
    GET: http://127.0.0.1:5000/items again to check get both items(piano and desk)
    DELETE: http://127.0.0.1:5000/item/piano
    GET: http://127.0.0.1:5000/items to check item deleted
    ==========================================================================================================

                                Simplifying storage with Flask-SQLAlchemy

Setting up project
    Create section6 folder
    virtualenv venv --python=python3
    .\venv\Scripts\activate
    pip3 install Flask-RESTful 
    pip3 install Flask-JWT
    pip3 install Flask-SQLAlchemy
Improving the project structure and maintainability
Creating User and Item models
Verifying the app works after our changes
    py .\create_table.py
    py .\app.py
    POST: http://127.0.0.1:5000/register
    POST: http://127.0.0.1:5000/auth
    GET: http://127.0.0.1:5000/items
    POST: http://127.0.0.1:5000/item/phone
    GET: http://127.0.0.1:5000/items again to check item created 
    GET: http://127.0.0.1:5000/item/phone
    DELETE: http://127.0.0.1:5000/item/phone
    PUT: http://127.0.0.1:5000/item/phone
    GET: http://127.0.0.1:5000/items again to check edited 
Advanced Postman: environments and tests
    Environment Variable
        url: http://127.0.0.1:5000
        token: 
    GET: {{url}}/items
    GET: {{url}}/item/phone
    POST: {{url}}/item/phone
    PUT: {{url}}/item/phone
    DELETE: {{url}}/item/phone
    POST: {{url}}/auth
    POST: {{url}}/register
    Tests tab: 
    POST: {{url}}/auth to check 
        Tests tab:
            var jsonData = pm.response.json();
            tests["Access token was not empty"] = jsonData.access_token !== undefined;
            pm.environment.set("token", jsonData.access_token);
        Test Results tab: 
            Pass: Access token was not empty
    GET: {{url}}/item/phone normal get result 
    GET: {{url}}/items
        Tests tab:
            pm.test("Response time is less than 200ms", function () {
                pm.expect(pm.response.responseTime).to.be.below(200);
            });
            pm.test("Status code is 200", function () {
                pm.response.to.have.status(200);
            });
        Test Results tab: 
            PASS: Response time is less than 200ms
            PASS: Status code is 200
    GET: {{url}}/item/test
        Tests tab:
            pm.test("Response time is less than 200ms", function () {
                pm.expect(pm.response.responseTime).to.be.below(200);
            });
            pm.test("Status code is 200", function () {
                pm.response.to.have.status(200);
            });
        Test Results tab: 
            PASS: Response time is less than 200ms
            FAIL: Status code is 200 | AssertionError: expected response to have status code 200 but got 401
Telling SQLAlchemy about our tables and columns
    